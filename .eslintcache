[{"/Users/andrew/Wyzant/Jacob_F/Wall_Project/client/src/App.js":"1","/Users/andrew/Wyzant/Jacob_F/Wall_Project/client/src/components/Wall.js":"2","/Users/andrew/Wyzant/Jacob_F/Wall_Project/client/src/reportWebVitals.js":"3","/Users/andrew/Wyzant/Jacob_F/Wall_Project/client/src/index.js":"4"},{"size":198,"mtime":1611432413240,"results":"5","hashOfConfig":"6"},{"size":14103,"mtime":1611431715172,"results":"7","hashOfConfig":"6"},{"size":362,"mtime":1610562874816,"results":"8","hashOfConfig":"6"},{"size":547,"mtime":1610821731266,"results":"9","hashOfConfig":"6"},{"filePath":"10","messages":"11","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"st3n3j",{"filePath":"12","messages":"13","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"14","messages":"15","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"16","messages":"17","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/andrew/Wyzant/Jacob_F/Wall_Project/client/src/App.js",[],"/Users/andrew/Wyzant/Jacob_F/Wall_Project/client/src/components/Wall.js",["18","19"],"/Users/andrew/Wyzant/Jacob_F/Wall_Project/client/src/reportWebVitals.js",[],"/Users/andrew/Wyzant/Jacob_F/Wall_Project/client/src/index.js",[],{"ruleId":"20","severity":1,"message":"21","line":90,"column":25,"nodeType":"22","endLine":90,"endColumn":42},{"ruleId":"23","severity":1,"message":"24","line":113,"column":19,"nodeType":"25","messageId":"26","endLine":113,"endColumn":28},"react-hooks/exhaustive-deps","Assignments to the 'sessionUserId' variable from inside React Hook useEffect will be lost after each render. To preserve the value over time, store it in a useRef Hook and keep the mutable value in the '.current' property. Otherwise, you can move this variable directly inside useEffect.","MemberExpression","no-unused-vars","'isMounted' is assigned a value but never used.","Identifier","unusedVar"]